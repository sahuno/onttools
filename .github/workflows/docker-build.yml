name: Build and Push Docker Image

on:
  push:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - 'requirements.txt'
      - '.github/workflows/docker-build.yml'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., 3.1, 3.2)'
        required: true
        type: string

env:
  DOCKER_USERNAME: sahuno
  IMAGE_NAME: onttools

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Determine version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="v${{ github.event.inputs.version }}"
        else
          # Auto-increment version based on existing tags
          # Get latest version tag
          LATEST_TAG=$(git ls-remote --tags origin | grep -E 'refs/tags/v[0-9]+\.[0-9]+$' | sed 's/.*\///g' | sort -V | tail -n 1)
          
          if [[ -z "$LATEST_TAG" ]]; then
            # No existing tags, start with v3.0
            VERSION="v3.0"
          else
            # Extract major and minor version
            MAJOR=$(echo $LATEST_TAG | cut -d. -f1 | sed 's/v//')
            MINOR=$(echo $LATEST_TAG | cut -d. -f2)
            
            # Increment minor version
            MINOR=$((MINOR + 1))
            VERSION="v${MAJOR}.${MINOR}"
          fi
        fi
        
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        echo "Building version: ${VERSION}"
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ steps.version.outputs.VERSION }}
          type=sha,prefix={{branch}}-
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: |
          org.opencontainers.image.version=${{ steps.version.outputs.VERSION }}
          org.opencontainers.image.created=${{ steps.meta.outputs.created }}
          org.opencontainers.image.revision=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
    
    - name: Create GitHub Release
      if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        release_name: Release ${{ steps.version.outputs.VERSION }}
        body: |
          Docker image: `${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}`
          
          Pull with:
          ```bash
          docker pull ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}
          ```
          
          Or use latest:
          ```bash
          docker pull ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          ```
        draft: false
        prerelease: false
    
    - name: Test Docker image
      if: github.event_name == 'pull_request'
      run: |
        docker run --rm ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.pull_request.number }} \
          bash -c "dorado --version && modkit --version && samtools --version"
